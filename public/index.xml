<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LOLCODE on LOLCODE Documentation</title>
    <link>http://example.org/</link>
    <description>Recent content in LOLCODE on LOLCODE Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="http://example.org/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Formatting</title>
      <link>http://example.org/docs/formatting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/formatting/</guid>
      <description>Whitespace#Spaces are used to demarcate tokens in the language, although some keyword constructs may include spaces.
Multiple spaces and tabs are treated as single spaces and are otherwise irrelevant.
Indentation is irrelevant.
A command starts at the beginning of a line and a newline indicates the end of a command, except in special cases.
A newline will be Carriage Return (/13), a Line Feed (/10) or both (/13/10) depending on the implementing system.</description>
    </item>
    
    <item>
      <title>Comments</title>
      <link>http://example.org/docs/comments/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/comments/</guid>
      <description>(from 1.1)
Single line comments are begun by BTW, and may occur either after a line of code, on a separate line, or following a line of code following a line separator (,).
All of these are valid single line comments:
I HAS A VAR ITZ 12 BTW VAR = 12 I HAS A VAR ITZ 12, BTW VAR = 12 I HAS A VAR ITZ 12 BTW VAR = 12 Multi-line comments are begun by OBTW and ended with TLDR, and should be started on their own lines, or following a line of code after a line separator.</description>
    </item>
    
    <item>
      <title>File Creation</title>
      <link>http://example.org/docs/file-creation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/file-creation/</guid>
      <description>(modified from 1.1)
All LOLCODE programs must be opened with the command HAI. HAI should then be followed with the current LOLCODE language version number (1.2, in this case). There is no current standard behavior for implementations to treat the version number, though.
A LOLCODE file is closed by the keyword KTHXBYE which closes the HAI code-block.</description>
    </item>
    
    <item>
      <title>Variables</title>
      <link>http://example.org/docs/variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/variables/</guid>
      <description>Scope#(to be revisited and refined)
All variable scope, as of this version, is local to the enclosing function or to the main program block. Variables are only accessible after declaration, and there is no global scope.
Naming#(from 1.1)
Variable identifiers may be in all small or lowercase letters (or a mixture of the two). They must begin with a letter and may be followed only by other letters, numbers, and underscores.</description>
    </item>
    
    <item>
      <title>Variable Types</title>
      <link>http://example.org/docs/variable-types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/variable-types/</guid>
      <description>(updated from 1.1)
The variable types that LOLCODE currently recognizes are: strings (YARN), integers (NUMBR), floats (NUMBAR), and booleans (TROOF) (Arrays (BUKKIT) are reserved for future expansion.) Typing is handled dynamically. Until a variable is given an initial value, it is untyped (NOOB). Casting operations operate on TYPE types, as well.
Untyped#The untyped type (NOOB) cannot be implicitly cast into any type except a TROOF. A cast into TROOF makes the variable FAIL.</description>
    </item>
    
    <item>
      <title>Operators</title>
      <link>http://example.org/docs/operators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/operators/</guid>
      <description>Calling Syntax and Precedence#Mathematical operators and functions in general rely on prefix notation. By doing this, it is possible to call and compose operations with a minimum of explicit grouping. When all operators and functions have known arity, no grouping markers are necessary. In cases where operators have variable arity, the operation is closed with MKAY. An MKAY may be omitted if it coincides with the end of the line/statement, in which case the EOL stands in for as many MKAYs as there are open variadic functions.</description>
    </item>
    
    <item>
      <title>Input/Output</title>
      <link>http://example.org/docs/input-output/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/input-output/</guid>
      <description>Terminal-Based#The print (to STDOUT or the terminal) operator is VISIBLE. It has infinite arity and implicitly concatenates all of its arguments after casting them to YARNs. It is terminated by the statement delimiter (line end or comma). The output is automatically terminated with a carriage return (:)), unless the final token is terminated with an exclamation point (!), in which case the carriage return is suppressed.
VISIBLE &amp;lt;expression&amp;gt; [&amp;lt;expression&amp;gt; .</description>
    </item>
    
    <item>
      <title>Statements</title>
      <link>http://example.org/docs/statements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/statements/</guid>
      <description>Expression Statements#A bare expression (e.g. a function call or math operation), without any assignment, is a legal statement in LOLCODE. Aside from any side-effects from the expression when evaluated, the final value is placed in the temporary variable IT. IT&amp;rsquo;s value remains in local scope and exists until the next time it is replaced with a bare expression.
Assignment Statements#Assignment statements have no side effects with IT.</description>
    </item>
    
    <item>
      <title>Flow Control</title>
      <link>http://example.org/docs/flow-control/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/flow-control/</guid>
      <description>Conditionals#If-Then#The traditional if/then construct is a very simple construct operating on the implicit IT variable. In the base form, there are four keywords: O RLY?, YA RLY, NO WAI, and OIC.
O RLY? branches to the block begun with YA RLY if IT can be cast to WIN, and branches to the NO WAI block if IT is FAIL. The code block introduced with YA RLY is implicitly closed when NO WAI is reached.</description>
    </item>
    
    <item>
      <title>Functions</title>
      <link>http://example.org/docs/functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/functions/</guid>
      <description>Definition#A function is demarked with the opening keyword HOW IZ I and the closing keyword IF U SAY SO. The syntax is as follows:
HOW IZ I &amp;lt;function name&amp;gt; [YR &amp;lt;argument1&amp;gt; [AN YR &amp;lt;argument2&amp;gt; â€¦]] &amp;lt;code block&amp;gt; IF U SAY SO Currently, the number of arguments in a function can only be defined as a fixed number. The &amp;lt;argument&amp;gt;s are single-word identifiers that act as variables within the scope of the function&amp;rsquo;s code.</description>
    </item>
    
  </channel>
</rss>
