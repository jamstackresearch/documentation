[{"id":0,"href":"/docs/formatting/","title":"Formatting","section":"Docs","content":"\rWhitespace\r#\rSpaces are used to demarcate tokens in the language, although some keyword constructs may include spaces.\nMultiple spaces and tabs are treated as single spaces and are otherwise irrelevant.\nIndentation is irrelevant.\nA command starts at the beginning of a line and a newline indicates the end of a command, except in special cases.\nA newline will be Carriage Return (/13), a Line Feed (/10) or both (/13/10) depending on the implementing system. This is only in regards to LOLCODE code itself, and does not indicate how these should be treated in strings or files during execution.\nMultiple commands can be put on a single line if they are separated by a comma (,). In this case, the comma acts as a virtual newline or a soft-command-break.\nMultiple lines can be combined into a single command by including three periods (\u0026hellip;) or the unicode ellipsis character (u2026) at the end of the line. This causes the contents of the next line to be evaluated as if it were on the same line.\nLines with line continuation can be strung together, many in a row, to allow a single command to stretch over more than one or two lines. As long as each line is ended with three periods, the next line is included, until a line without three periods is reached, at which point, the entire command may be processed.\nA line with line continuation may not be followed by an empty line. Three periods may be by themselves on a single line, in which case, the empty line is \u0026ldquo;included\u0026rdquo; in the command (doing nothing), and the next line is included as well.\nA single-line comment is always terminated by a newline. Line continuation (\u0026hellip;) and soft-command-breaks (,) after the comment (BTW) are ignored.\nLine continuation and soft-command-breaks are ignored inside quoted strings. An unterminated string literal (no closing quote) will cause an error.\n"},{"id":1,"href":"/docs/comments/","title":"Comments","section":"Docs","content":"(from 1.1)\nSingle line comments are begun by BTW, and may occur either after a line of code, on a separate line, or following a line of code following a line separator (,).\nAll of these are valid single line comments:\nI HAS A VAR ITZ 12 BTW VAR = 12 I HAS A VAR ITZ 12, BTW VAR = 12 I HAS A VAR ITZ 12 BTW VAR = 12 Multi-line comments are begun by OBTW and ended with TLDR, and should be started on their own lines, or following a line of code after a line separator.\nThese are valid multi-line comments:\nI HAS A VAR ITZ 12 OBTW this is a long comment block see, i have more comments here and here TLDR I HAS A FISH ITZ BOB I HAS A VAR ITZ 12, OBTW this is a long comment block see, i have more comments here and here TLDR, I HAS A FISH ITZ BOB "},{"id":2,"href":"/docs/file-creation/","title":"File Creation","section":"Docs","content":"(modified from 1.1)\nAll LOLCODE programs must be opened with the command HAI. HAI should then be followed with the current LOLCODE language version number (1.2, in this case). There is no current standard behavior for implementations to treat the version number, though.\nA LOLCODE file is closed by the keyword KTHXBYE which closes the HAI code-block.\n"},{"id":3,"href":"/docs/variables/","title":"Variables","section":"Docs","content":"\rScope\r#\r(to be revisited and refined)\nAll variable scope, as of this version, is local to the enclosing function or to the main program block. Variables are only accessible after declaration, and there is no global scope.\nNaming\r#\r(from 1.1)\nVariable identifiers may be in all small or lowercase letters (or a mixture of the two). They must begin with a letter and may be followed only by other letters, numbers, and underscores. No spaces, dashes, or other symbols are allowed. Variable identifiers are CASE SENSITIVE â€“ \u0026ldquo;cheezburger\u0026rdquo;, \u0026ldquo;CheezBurger\u0026rdquo; and \u0026ldquo;CHEEZBURGER\u0026rdquo; would all be different variables.\nDeclaration and Assignment\r#\r(modified from 1.1)\nTo declare a variable, the keyword is I HAS A followed by the variable name. To assign the variable a value within the same statement, you can then follow the variable name with ITZ \u0026lt;value\u0026gt;.\nAssignment of a variable is accomplished with an assignment statement, \u0026lt;variable\u0026gt; R \u0026lt;expression\u0026gt;\nI HAS A VAR BTW VAR is null and untyped VAR R \u0026#34;THREE\u0026#34; BTW VAR is now a YARN and equals \u0026#34;THREE\u0026#34; VAR R 3 BTW VAR is now a NUMBR and equals 3 See variable types for more information.\n"},{"id":4,"href":"/docs/variable-types/","title":"Variable Types","section":"Docs","content":"(updated from 1.1)\nThe variable types that LOLCODE currently recognizes are: strings (YARN), integers (NUMBR), floats (NUMBAR), and booleans (TROOF) (Arrays (BUKKIT) are reserved for future expansion.) Typing is handled dynamically. Until a variable is given an initial value, it is untyped (NOOB). Casting operations operate on TYPE types, as well.\nUntyped\r#\rThe untyped type (NOOB) cannot be implicitly cast into any type except a TROOF. A cast into TROOF makes the variable FAIL. Any operations on a NOOB that assume another type (e.g., math) results in an error.\nExplicit casts of a NOOB (untyped, uninitialized) variable are to empty/zero values for all other types.\nBooleans\r#\rThe two boolean (TROOF) values are WIN (true) and FAIL (false). The empty string (\u0026quot;\u0026quot;), an empty array, and numerical zero are all cast to FAIL. All other values evaluate to WIN.\nNumerical Types\r#\rA NUMBR is an integer as specified in the host implementation/architecture. Any contiguous sequence of digits outside of a quoted YARN and not containing a decimal point (.) is considered a NUMBR. A NUMBR may have a leading hyphen (-) to signify a negative number.\nA NUMBAR is a float as specified in the host implementation/architecture. It is represented as a contiguous string of digits containing exactly one decimal point. Casting a NUMBAR to a NUMBR truncates the decimal portion of the floating point number. Casting a NUMBAR to a YARN (by printing it, for example), truncates the output to a default of two decimal places. A NUMBAR may have a leading hyphen (-) to signify a negative number.\nCasting of a string to a numerical type parses the string as if it were not in quotes. If there are any non-numerical, non-hyphen, non-period characters, then it results in an error. Casting WIN to a numerical type results in \u0026ldquo;1\u0026rdquo; or \u0026ldquo;1.0\u0026rdquo;; casting FAIL results in a numerical zero.\nStrings\r#\rString literals (YARN) are demarked with double quotation marks (\u0026quot;). Line continuation and soft-command-breaks are ignored inside quoted strings. An unterminated string literal (no closing quote) will cause an error.\nWithin a string, all characters represent their literal value except the colon (:), which is the escape character. Characters immediately following the colon also take on a special meaning.\n:) represents a newline (\\n) :\u0026gt; represents a tab (\\t) :o represents a bell (beep) (\\g) :\u0026quot; represents a literal double quote (\u0026quot;) :: represents a single literal colon (:) The colon may also introduce more verbose escapes enclosed within some form of bracket.\n:(\u0026lt;hex\u0026gt;) resolves the hex number into the corresponding Unicode code point. :{\u0026lt;var\u0026gt;} interpolates the current value of the enclosed variable, cast as a string. :[\u0026lt;char name\u0026gt;] resolves the \u0026lt;char name\u0026gt; in capital letters to the corresponding Unicode normative name. Arrays\r#\rArray and dictionary types are currently under-specified. There is general will to unify them, but indexing and definition is still under discussion.\nTypes\r#\rThe TYPE type only has the values of TROOF, NOOB, NUMBR, NUMBAR, YARN, and TYPE, as bare words. They may be legally cast to TROOF (all true except for NOOB) or YARN.\nTYPEs are under current review. Current sentiment is to delay defining them until user-defined types are relevant, but that would mean that type comparisons are left unresolved in the meantime.\n"},{"id":5,"href":"/docs/operators/","title":"Operators","section":"Docs","content":"\rCalling Syntax and Precedence\r#\rMathematical operators and functions in general rely on prefix notation. By doing this, it is possible to call and compose operations with a minimum of explicit grouping. When all operators and functions have known arity, no grouping markers are necessary. In cases where operators have variable arity, the operation is closed with MKAY. An MKAY may be omitted if it coincides with the end of the line/statement, in which case the EOL stands in for as many MKAYs as there are open variadic functions.\nCalling unary operators then has the following syntax:\n\u0026lt;operator\u0026gt; \u0026lt;expression1\u0026gt; The AN keyword can optionally be used to separate arguments, so a binary operator expression has the following syntax:\n\u0026lt;operator\u0026gt; \u0026lt;expression1\u0026gt; [AN] \u0026lt;expression2\u0026gt; An expression containing an operator with infinite arity can then be expressed with the following syntax:\n\u0026lt;operator\u0026gt; \u0026lt;expr1\u0026gt; [[[AN] \u0026lt;expr2\u0026gt;] [AN] \u0026lt;expr3\u0026gt; ...] MKAY Math\r#\rThe basic math operators are binary prefix operators.\nSUM OF \u0026lt;x\u0026gt; AN \u0026lt;y\u0026gt; BTW + DIFF OF \u0026lt;x\u0026gt; AN \u0026lt;y\u0026gt; BTW - PRODUKT OF \u0026lt;x\u0026gt; AN \u0026lt;y\u0026gt; BTW * QUOSHUNT OF \u0026lt;x\u0026gt; AN \u0026lt;y\u0026gt; BTW / MOD OF \u0026lt;x\u0026gt; AN \u0026lt;y\u0026gt; BTW modulo BIGGR OF \u0026lt;x\u0026gt; AN \u0026lt;y\u0026gt; BTW max SMALLR OF \u0026lt;x\u0026gt; AN \u0026lt;y\u0026gt; BTW min \u0026lt;x\u0026gt; and \u0026lt;y\u0026gt; may each be expressions in the above, so mathematical operators can be nested and grouped indefinitely.\nMath is performed as integer math in the presence of two NUMBRs, but if either of the expressions are NUMBARs, then floating point math takes over.\nIf one or both arguments are a YARN, they get interpreted as NUMBARs if the YARN has a decimal point, and NUMBRs otherwise, then execution proceeds as above.\nIf one or another of the arguments cannot be safely cast to a numerical type, then it fails with an error.\nBoolean\r#\rBoolean operators working on TROOFs are as follows:\nBOTH OF \u0026lt;x\u0026gt; [AN] \u0026lt;y\u0026gt; BTW and: WIN iff x=WIN, y=WIN EITHER OF \u0026lt;x\u0026gt; [AN] \u0026lt;y\u0026gt; BTW or: FAIL iff x=FAIL, y=FAIL WON OF \u0026lt;x\u0026gt; [AN] \u0026lt;y\u0026gt; BTW xor: FAIL if x=y NOT \u0026lt;x\u0026gt; BTW unary negation: WIN if x=FAIL ALL OF \u0026lt;x\u0026gt; [AN] \u0026lt;y\u0026gt; ... MKAY BTW infinite arity AND ANY OF \u0026lt;x\u0026gt; [AN] \u0026lt;y\u0026gt; ... MKAY BTW infinite arity OR \u0026lt;x\u0026gt; and \u0026lt;y\u0026gt; in the expression syntaxes above are automatically cast as TROOF values if they are not already so.\nComparison\r#\rComparison is (currently) done with two binary equality operators:\nBOTH SAEM \u0026lt;x\u0026gt; [AN] \u0026lt;y\u0026gt; BTW WIN iff x == y DIFFRINT \u0026lt;x\u0026gt; [AN] \u0026lt;y\u0026gt; BTW WIN iff x != y Comparisons are performed as integer math in the presence of two NUMBRs, but if either of the expressions are NUMBARs, then floating point math takes over. Otherwise, there is no automatic casting in the equality, so BOTH SAEM \u0026quot;3\u0026quot; AN 3 is FAIL.\nThere are (currently) no special numerical comparison operators. Greater-than and similar comparisons are done idiomatically using the minimum and maximum operators.\nBOTH SAEM \u0026lt;x\u0026gt; AN BIGGR OF \u0026lt;x\u0026gt; AN \u0026lt;y\u0026gt; BTW x \u0026gt;= y BOTH SAEM \u0026lt;x\u0026gt; AN SMALLR OF \u0026lt;x\u0026gt; AN \u0026lt;y\u0026gt; BTW x \u0026lt;= y DIFFRINT \u0026lt;x\u0026gt; AN SMALLR OF \u0026lt;x\u0026gt; AN \u0026lt;y\u0026gt; BTW x \u0026gt; y DIFFRINT \u0026lt;x\u0026gt; AN BIGGR OF \u0026lt;x\u0026gt; AN \u0026lt;y\u0026gt; BTW x \u0026lt; y If \u0026lt;x\u0026gt; in the above formulations is too verbose or difficult to compute, don\u0026rsquo;t forget the automatically created IT temporary variable. A further idiom could then be:\n\u0026lt;expression\u0026gt;, DIFFRINT IT AN SMALLR OF IT AN \u0026lt;y\u0026gt; Suggestions are being accepted for coherently and convincingly english-like prefix operator names for greater-than and similar operators.\nConcatenation\r#\rAn indefinite number of YARNs may be explicitly concatenated with the SMOOSH...MKAY operator. Arguments may optionally be separated with AN. As the SMOOSH expects strings as its input arguments, it will implicitly cast all input values of other types to YARNs. The line ending may safely implicitly close the SMOOSH operator without needing an MKAY.\nCasting\r#\rOperators that work on specific types implicitly cast parameter values of other types. If the value cannot be safely cast, then it results in an error.\nAn expression\u0026rsquo;s value may be explicitly cast with the binary MAEK operator.\nMAEK \u0026lt;expression\u0026gt; [A] \u0026lt;type\u0026gt; Where \u0026lt;type\u0026gt; is one of TROOF, YARN, NUMBR, NUMBAR, or NOOB. This is only for local casting: only the resultant value is cast, not the underlying variable(s), if any.\nTo explicitly re-cast a variable, you may create a normal assignment statement with the MAEK operator, or use a casting assignment statement as follows:\n\u0026lt;variable\u0026gt; IS NOW A \u0026lt;type\u0026gt; BTW equivalent to \u0026lt;variable\u0026gt; R MAEK \u0026lt;variable\u0026gt; [A] \u0026lt;type\u0026gt; "},{"id":6,"href":"/docs/input-output/","title":"Input/Output","section":"Docs","content":"\rTerminal-Based\r#\rThe print (to STDOUT or the terminal) operator is VISIBLE. It has infinite arity and implicitly concatenates all of its arguments after casting them to YARNs. It is terminated by the statement delimiter (line end or comma). The output is automatically terminated with a carriage return (:)), unless the final token is terminated with an exclamation point (!), in which case the carriage return is suppressed.\nVISIBLE \u0026lt;expression\u0026gt; [\u0026lt;expression\u0026gt; ...][!] There is currently no defined standard for printing to a file.\nTo accept input from the user, the keyword is\nGIMMEH \u0026lt;variable\u0026gt; which takes YARN for input and stores the value in the given variable.\nGIMMEH is defined minimally here as a holdover from 1.0 and because there has not been any detailed discussion of this feature. We count on the liberal casting capabilities of the language and programmer inventiveness to handle input restriction. GIMMEH may change in a future version.\n"},{"id":7,"href":"/docs/statements/","title":"Statements","section":"Docs","content":"\rExpression Statements\r#\rA bare expression (e.g. a function call or math operation), without any assignment, is a legal statement in LOLCODE. Aside from any side-effects from the expression when evaluated, the final value is placed in the temporary variable IT. IT\u0026rsquo;s value remains in local scope and exists until the next time it is replaced with a bare expression.\nAssignment Statements\r#\rAssignment statements have no side effects with IT. They are generally of the form:\n\u0026lt;variable\u0026gt; \u0026lt;assignment operator\u0026gt; \u0026lt;expression\u0026gt; The variable being assigned may be used in the expression.\nFlow Control Statements\r#\rFlow control statements cover multiple lines and are described in the following section.\n"},{"id":8,"href":"/docs/flow-control/","title":"Flow Control","section":"Docs","content":"\rConditionals\r#\rIf-Then\r#\rThe traditional if/then construct is a very simple construct operating on the implicit IT variable. In the base form, there are four keywords: O RLY?, YA RLY, NO WAI, and OIC.\nO RLY? branches to the block begun with YA RLY if IT can be cast to WIN, and branches to the NO WAI block if IT is FAIL. The code block introduced with YA RLY is implicitly closed when NO WAI is reached. The NO WAI block is closed with OIC. The general form is then as follows:\n\u0026lt;expression\u0026gt; O RLY? YA RLY \u0026lt;code block\u0026gt; NO WAI \u0026lt;code block\u0026gt; OIC while an example showing the ability to put multiple statements on a line separated by a comma would be:\nBOTH SAEM ANIMAL AN \u0026#34;CAT\u0026#34;, O RLY? YA RLY, VISIBLE \u0026#34;J00 HAV A CAT\u0026#34; NO WAI, VISIBLE \u0026#34;J00 SUX\u0026#34; OIC The elseif construction adds a little bit of complexity. Optional MEBBE \u0026lt;expression\u0026gt; blocks may appear between the YA RLY and NO WAI blocks. If the \u0026lt;expression\u0026gt; following MEBBE is WIN, then that block is performed; if not, the block is skipped until the following MEBBE, NO WAI, or OIC. The full expression syntax is then as follows:\n\u0026lt;expression\u0026gt; O RLY? YA RLY \u0026lt;code block\u0026gt; [MEBBE \u0026lt;expression\u0026gt; \u0026lt;code block\u0026gt; [MEBBE \u0026lt;expression\u0026gt; \u0026lt;code block\u0026gt; ...]] [NO WAI \u0026lt;code block\u0026gt;] OIC An example of this conditional is then:\nBOTH SAEM ANIMAL AN \u0026#34;CAT\u0026#34; O RLY? YA RLY, VISIBLE \u0026#34;J00 HAV A CAT\u0026#34; MEBBE BOTH SAEM ANIMAL AN \u0026#34;MAUS\u0026#34; VISIBLE \u0026#34;NOM NOM NOM. I EATED IT.\u0026#34; OIC Case\r#\r(modified from 1.1)\nThe LOLCODE keyword for switches is WTF?. The WTF? operates on IT as being the expression value for comparison. A comparison block is opened by OMG and must be a literal, not an expression. (A literal, in this case, excludes any YARN containing variable interpolation (:{var}).) Each literal must be unique. The OMG block can be followed by any number of statements and may be terminated by a GTFO, which breaks to the end of the the WTF statement. If an OMG block is not terminated by a GTFO, then the next OMG block is executed as is the next until a GTFO or the end of the WTF block is reached. The optional default case, if none of the literals evaluate as true, is signified by OMGWTF.\nWTF? OMG \u0026lt;value literal\u0026gt; \u0026lt;code block\u0026gt; [OMG \u0026lt;value literal\u0026gt; \u0026lt;code block\u0026gt; ...] [OMGWTF \u0026lt;code block\u0026gt;] OIC COLOR, WTF? OMG \u0026#34;R\u0026#34; VISIBLE \u0026#34;RED FISH\u0026#34; GTFO OMG \u0026#34;Y\u0026#34; VISIBLE \u0026#34;YELLOW FISH\u0026#34; OMG \u0026#34;G\u0026#34; OMG \u0026#34;B\u0026#34; VISIBLE \u0026#34;FISH HAS A FLAVOR\u0026#34; GTFO OMGWTF VISIBLE \u0026#34;FISH IS TRANSPARENT\u0026#34; OIC In this example, the output results of evaluating the variable COLOR would be:\n\u0026ldquo;R\u0026rdquo;:\nRED FISH \u0026ldquo;Y\u0026rdquo;:\nYELLOW FISH FISH HAS A FLAVOR \u0026ldquo;G\u0026rdquo;:\nFISH HAS A FLAVOR \u0026ldquo;B\u0026rdquo;:\nFISH HAS A FLAVOR none of the above:\nFISH IS TRANSPARENT Loops\r#\rLoops are currently defined more or less as they were in the original examples. Further looping constructs will be added to the language soon.\nSimple loops are demarcated with IM IN YR \u0026lt;label\u0026gt; and IM OUTTA YR \u0026lt;label\u0026gt;. Loops defined this way are infinite loops that must be explicitly exited with a GTFO break. Currently, the \u0026lt;label\u0026gt; is required, but is unused, except for marking the start and end of the loop.\nImmature spec â€“ subject to change:\nIteration loops have the form:\nIM IN YR \u0026lt;label\u0026gt; \u0026lt;operation\u0026gt; YR \u0026lt;variable\u0026gt; [TIL|WILE \u0026lt;expression\u0026gt;] \u0026lt;code block\u0026gt; IM OUTTA YR \u0026lt;label\u0026gt; Where may be UPPIN (increment by one), NERFIN (decrement by one), or any unary function. That operation/function is applied to the , which is temporary, and local to the loop. The TIL evaluates the expression as a TROOF: if it evaluates as FAIL, the loop continues once more, if not, then loop execution stops, and continues after the matching IM OUTTA YR . The WILE is the converse: if the expression is WIN, execution continues, otherwise the loop exits.\n"},{"id":9,"href":"/docs/functions/","title":"Functions","section":"Docs","content":"\rDefinition\r#\rA function is demarked with the opening keyword HOW IZ I and the closing keyword IF U SAY SO. The syntax is as follows:\nHOW IZ I \u0026lt;function name\u0026gt; [YR \u0026lt;argument1\u0026gt; [AN YR \u0026lt;argument2\u0026gt; â€¦]] \u0026lt;code block\u0026gt; IF U SAY SO Currently, the number of arguments in a function can only be defined as a fixed number. The \u0026lt;argument\u0026gt;s are single-word identifiers that act as variables within the scope of the function\u0026rsquo;s code. The calling parameters\u0026rsquo; values are then the initial values for the variables within the function\u0026rsquo;s code block when the function is called.\nCurrently, functions do not have access to the outer/calling code block\u0026rsquo;s variables.\nReturning\r#\rReturn from the function is accomplished in one of the following ways:\nFOUND YR \u0026lt;expression\u0026gt; returns the value of the expression. GTFO returns with no value (NOOB). in the absence of any explicit break, when the end of the code block is reached (IF U SAY SO), the value in IT is returned. Calling\r#\rA function of given arity is called with:\nI IZ \u0026lt;function name\u0026gt; [YR \u0026lt;expression1\u0026gt; [AN YR \u0026lt;expression2\u0026gt; [AN YR \u0026lt;expression3\u0026gt; ...]]] MKAY That is, an expression is formed by the function name followed by any arguments. Those arguments may themselves be expressions. The expressions\u0026rsquo; values are obtained before the function is called. The arity of the functions is determined in the definition.\n"}]